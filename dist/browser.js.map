{"mappings":"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","sources":["<anon>","src/browser.mjs","src/lib/Null.mjs","src/lib/functions.mjs","src/lib/Link.mjs","src/lib/Parser.mjs"],"sourcesContent":["(() => {\n\nclass $c2efebb60248672c$export$2e2bcd8739ae039 {\n    #url;\n    constructor(url){\n        if (typeof url !== \"string\") throw new Error(\"not a url:\", url);\n        this.#url = \"\" + url;\n        (0, $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb)(this, \"link\");\n    }\n    static from(url) {\n        if (url instanceof $c2efebb60248672c$export$2e2bcd8739ae039) return url;\n        if (typeof url !== \"string\") throw new Error(\"not a url:\", url);\n        return new $c2efebb60248672c$export$2e2bcd8739ae039(url);\n    }\n    get value() {\n        return this.#url;\n    }\n    toString() {\n        return this.#url;\n    }\n    toJSON() {\n        return this.#url;\n    }\n    toJSONTag() {\n        let result = new String(this.#url);\n        let attributes = (0, $8e1f6d594b3b3e33$export$fe94072fee8a6976)(this);\n        if (attributes) (0, $8e1f6d594b3b3e33$export$74da2cba014bdc09)(result, attributes);\n        (0, $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb)(result, \"link\");\n        return result;\n    }\n}\n\n\nif (!Symbol[\"JSONTag:Type\"]) Symbol[\"JSONTag:Type\"] = Symbol(\"@type\");\nif (!Symbol[\"JSONTag:Attributes\"]) Symbol[\"JSONTag:Attributes\"] = Symbol(\"@attributes\");\nif (!Symbol[\"JSONTag:Null\"]) Symbol[\"JSONTag:Null\"] = Symbol(\"@null\");\n// keep reference to original JSON.stringify, in case someone monkeypatches it\nconst $8e1f6d594b3b3e33$var$jsonStringify = JSON.stringify;\nconst $8e1f6d594b3b3e33$export$fac44ee5b035f737 = (value, replacer = null, space = \"\")=>{\n    const objectReferences = new WeakMap();\n    let indent = \"\";\n    let gap = \"\";\n    if (typeof space === \"number\") indent += \" \".repeat(space);\n    else if (typeof space === \"string\") indent = space;\n    if (replacer && typeof replacer !== \"function\" && (typeof replacer !== \"object\" || typeof replacer.length !== \"number\")) throw new Error(\"JSONTag.stringify\");\n    const encodeProperties = (obj)=>{\n        let mind = gap;\n        gap += indent;\n        let gapstart = \"\";\n        let gapend = \"\";\n        let keys = Object.keys(obj);\n        if (Array.isArray(replacer)) keys = keys.filter((key)=>replacer.indexOf(key) !== -1);\n        if (gap) {\n            gapstart = \"\\n\" + gap;\n            gapend = \"\\n\" + mind;\n        }\n        let result = gapstart + keys.map((prop)=>{\n            if (obj[prop] === undefined) return null;\n            return $8e1f6d594b3b3e33$var$jsonStringify(prop) + \":\" + str(prop, obj);\n        }).filter(Boolean).join(\",\" + gapstart) + gapend;\n        gap = mind;\n        return result;\n    };\n    const encodeEntries = (arr)=>{\n        let mind = gap;\n        gap += indent;\n        let gapstart = \"\";\n        let gapend = \"\";\n        if (gap) {\n            gapstart = \"\\n\" + gap;\n            gapend = \"\\n\" + mind;\n        }\n        let result = gapstart + arr.map((value, index)=>{\n            return str(index, arr);\n        }).join(\",\" + gapstart) + gapend;\n        gap = mind;\n        return result;\n    };\n    /**\n\t * Walks over all objects in value to set ids if needed\n\t */ const checkCircular = new WeakMap();\n    function createIds(value) {\n        if (Array.isArray(value)) for (let v of value)createIds(v);\n        else if (value && typeof value == \"object\") {\n            if (checkCircular.has(value)) {\n                let id = $8e1f6d594b3b3e33$export$735ee1799fd02602(value, \"id\");\n                if (!id) $8e1f6d594b3b3e33$var$createId(value);\n            } else {\n                checkCircular.set(value, true);\n                for(let k in value)createIds(value[k]);\n            }\n        }\n    }\n    const str = (key, holder)=>{\n        let value = holder[key];\n        if (typeof replacer === \"function\" && key !== \"\") value = replacer.call(holder, key, value);\n        if ($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(value) === \"object\" && objectReferences.has(value)) {\n            let id = $8e1f6d594b3b3e33$export$735ee1799fd02602(value, \"id\");\n            if (!id) // FIXME: this is too late, value may already have been stringified, without id earlier\n            id = $8e1f6d594b3b3e33$var$createId(value);\n            return '<link>\"' + id + '\"';\n        }\n        if (typeof value === \"undefined\" || value === null) return \"null\";\n        if ($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(value) === \"object\") objectReferences.set(value, true);\n        if (typeof value.toJSONTag == \"function\") value = value.toJSONTag();\n        else if (typeof value.toJSON == \"function\") {\n            let type = $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(value);\n            let attr = $8e1f6d594b3b3e33$export$fe94072fee8a6976(value);\n            let jsonValue = value.toJSON();\n            if (typeof jsonValue == \"string\") value = new String(jsonValue) // convert to object so we can add type/attributes\n            ;\n            else if (typeof jsonValue == \"number\") value = new Number(jsonValue) // convert to object so we can add type/attributes\n            ;\n            else if (jsonValue == null) {\n                if (value !== null) return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + \"null\";\n                return \"null\";\n            } else value = jsonValue;\n            if (attr) $8e1f6d594b3b3e33$export$74da2cba014bdc09(value, attr);\n            if (type) $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb(value, type);\n        }\n        if (Array.isArray(value)) return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + \"[\" + encodeEntries(value) + \"]\";\n        else if (value instanceof Object) switch($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(value)){\n            case \"string\":\n            case \"decimal\":\n            case \"money\":\n            case \"link\":\n            case \"text\":\n            case \"blob\":\n            case \"color\":\n            case \"email\":\n            case \"hash\":\n            case \"duration\":\n            case \"phone\":\n            case \"url\":\n            case \"uuid\":\n            case \"date\":\n            case \"time\":\n            case \"datetime\":\n                return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + $8e1f6d594b3b3e33$var$jsonStringify(\"\" + value, replacer, space);\n            case \"int\":\n            case \"uint\":\n            case \"int8\":\n            case \"uint8\":\n            case \"int16\":\n            case \"uint16\":\n            case \"int32\":\n            case \"uint32\":\n            case \"int64\":\n            case \"uint64\":\n            case \"float\":\n            case \"float32\":\n            case \"float64\":\n            case \"timestamp\":\n            case \"number\":\n            case \"boolean\":\n                return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + $8e1f6d594b3b3e33$var$jsonStringify(value, replacer, space);\n            case \"array\":\n                let entries = encodeEntries(value) // calculate children first so parent references can add id attribute\n                ;\n                return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + \"[\" + entries + \"}\";\n            case \"object\":\n                if (value === null) return \"null\";\n                let props = encodeProperties(value); // calculate children first so parent references can add id attribute\n                return $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(value) + \"{\" + props + \"}\";\n            default:\n                throw new Error($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(value) + \" type not yet implemented\");\n        }\n        else return $8e1f6d594b3b3e33$var$jsonStringify(value, replacer, space);\n    };\n    // first check if there are circular references\n    // if so, make sure that the referenced objects have an id attribute\n    createIds(value);\n    const result = str(\"\", {\n        \"\": value\n    });\n    return result;\n};\nfunction $8e1f6d594b3b3e33$var$createId(value) {\n    if (typeof crypto.randomUUID === \"function\") var id = crypto.randomUUID();\n    else {\n        // Fallback for when crypto.randomUUID is not available\n        let replacer = (c)=>c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4;\n        if (typeof crypto === \"undefined\") // Fallback even further for when crypto API is not available\n        replacer = (c)=>c ^ Math.random() * 256 & 15 >> c / 4;\n        var id = \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, (c)=>replacer(c).toString(16));\n    }\n    $8e1f6d594b3b3e33$export$9fec4d97f1922e0b(value, \"id\", id);\n    return id;\n}\nconst $8e1f6d594b3b3e33$export$630801d484da15df = (v)=>{\n    return v === null || v?.[Symbol[\"JSONTag:Null\"]] == true;\n};\nconst $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd = (obj)=>{\n    let type = typeof obj;\n    if (obj && type == \"object\" && (obj instanceof String || obj instanceof Number || $8e1f6d594b3b3e33$export$630801d484da15df(obj)) && typeof obj[Symbol[\"JSONTag:Type\"]] != \"undefined\") type = obj[Symbol[\"JSONTag:Type\"]];\n    else if (Array.isArray(obj)) type = \"array\";\n    else if (obj instanceof Number) type = \"number\";\n    else if (obj instanceof Boolean) type = \"boolean\";\n    else if (obj instanceof (0, $c2efebb60248672c$export$2e2bcd8739ae039)) type = \"link\";\n    return type;\n};\nconst $8e1f6d594b3b3e33$export$b14ad400b1d09e0f = [\n    \"object\",\n    \"array\",\n    \"string\",\n    \"number\",\n    \"boolean\",\n    \"decimal\",\n    \"money\",\n    \"uuid\",\n    \"url\",\n    \"link\",\n    \"date\",\n    \"time\",\n    \"datetime\",\n    \"duration\",\n    \"timestamp\",\n    \"text\",\n    \"blob\",\n    \"color\",\n    \"email\",\n    \"hash\",\n    \"phone\",\n    \"int\",\n    \"int8\",\n    \"int16\",\n    \"int32\",\n    \"int64\",\n    \"uint\",\n    \"uint8\",\n    \"uint16\",\n    \"uint32\",\n    \"uint64\",\n    \"float\",\n    \"float32\",\n    \"float64\"\n];\nconst $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb = (obj, type)=>{\n    if (typeof obj !== \"object\") throw new TypeError(\"JSONTag can only add attributes to objects, convert literals to objects first\");\n    if (!$8e1f6d594b3b3e33$export$b14ad400b1d09e0f.includes(type)) throw new TypeError(\"unknown type \" + type);\n    if (Array.isArray(obj)) {\n        if (type !== \"array\") throw new TypeError('JSONTag can only set type \"array\" on an array');\n        return;\n    } else if (obj instanceof String || obj instanceof Number || $8e1f6d594b3b3e33$export$630801d484da15df(obj)) obj[Symbol[\"JSONTag:Type\"]] = type;\n    else if (type == \"link\" && obj instanceof (0, $c2efebb60248672c$export$2e2bcd8739ae039)) ;\n    else if (type !== \"object\") throw new TypeError('JSONTag can only set type \"object\" on an object');\n};\nconst $8e1f6d594b3b3e33$export$9fec4d97f1922e0b = (obj, attr, value)=>{\n    if (!obj || typeof obj !== \"object\") throw new TypeError(\"JSONTag can only add attributes to objects, convert literals to objects first\");\n    if (Array.isArray(value)) value = value.join(\" \");\n    if (typeof value !== \"string\") throw new TypeError(\"attribute values must be a string or an array of strings\");\n    if (value.indexOf('\"') !== -1) throw new TypeError('attribute values must not contain \" character');\n    if (value.indexOf(\" \") !== -1) value = value.split(\" \");\n    const attributes = obj[Symbol[\"JSONTag:Attributes\"]] ?? {};\n    attributes[attr] = value;\n    obj[Symbol[\"JSONTag:Attributes\"]] = attributes;\n};\nconst $8e1f6d594b3b3e33$export$74da2cba014bdc09 = (obj, attributes)=>{\n    if (typeof obj !== \"object\") throw new TypeError(\"JSONTag can only add attributes to objects, convert literals to objects first\");\n    if (typeof attributes !== \"object\") throw new TypeError(\"attributes param must be an object\");\n    Object.keys(attributes).forEach((key)=>{\n        $8e1f6d594b3b3e33$export$9fec4d97f1922e0b(obj, key, attributes[key]);\n    });\n};\nconst $8e1f6d594b3b3e33$export$735ee1799fd02602 = (obj, attr)=>{\n    const attributes = obj[Symbol[\"JSONTag:Attributes\"]] ?? {};\n    return attributes[attr];\n};\nconst $8e1f6d594b3b3e33$export$5dcb5c23b6ba980a = (obj, attr, value)=>{\n    if (typeof value !== \"string\") throw new TypeError(\"attribute values must be a string\");\n    if (value.indexOf('\"') !== -1) throw new TypeError('attribute values must not contain \" characters');\n    const attributes = obj[Symbol[\"JSONTag:Attributes\"]] ?? {};\n    if (typeof attributes[attr] === \"undefined\") $8e1f6d594b3b3e33$export$9fec4d97f1922e0b(obj, attr, value);\n    else {\n        if (!Array.isArray(attributes[attr])) attributes[attr] = [\n            attributes[attr]\n        ];\n        if (value.indexOf(\" \") !== -1) value = value.split(\" \");\n        else value = [\n            value\n        ];\n        attributes[attr] = attributes[attr].concat(value);\n        obj[Symbol[\"JSONTag:Attributes\"]] = attributes;\n    }\n};\nconst $8e1f6d594b3b3e33$export$6399f3bb52316b2c = (obj, attr)=>{\n    const attributes = obj[Symbol[\"JSONTag:Attributes\"]];\n    if (typeof attributes?.[attr] !== \"undefined\") delete attributes[attr];\n};\nconst $8e1f6d594b3b3e33$export$fe94072fee8a6976 = (obj)=>{\n    const attributes = obj[Symbol[\"JSONTag:Attributes\"]] ?? {};\n    return Object.assign({}, attributes);\n};\nconst $8e1f6d594b3b3e33$export$f4cc4d0befd5def7 = (obj)=>{\n    return Object.entries($8e1f6d594b3b3e33$export$fe94072fee8a6976(obj)).map(([attr, attrValue])=>{\n        if (Array.isArray(attrValue)) attrValue = attrValue.join(\" \");\n        return attr + '=\"' + attrValue + '\"';\n    }).join(\" \");\n};\nconst $8e1f6d594b3b3e33$export$e8bbf06ddab4542c = (obj)=>{\n    let type = $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(obj);\n    let attributes = $8e1f6d594b3b3e33$export$fe94072fee8a6976(obj);\n    let attributesString = Object.entries(attributes).map(([attr, attrValue])=>{\n        if (Array.isArray(attrValue)) attrValue = attrValue.join(\" \");\n        return attr + '=\"' + attrValue + '\"';\n    }).join(\" \");\n    if (!attributesString) {\n        if ([\n            \"object\",\n            \"array\",\n            \"string\",\n            \"number\",\n            \"boolean\"\n        ].indexOf(type) !== -1) type = \"\";\n    }\n    if (type || attributesString) return \"<\" + [\n        type,\n        attributesString\n    ].filter(Boolean).join(\" \") + \">\";\n    else return \"\";\n};\nfunction $8e1f6d594b3b3e33$var$shallowClone(o) {\n    if (o instanceof Number) return new Number(o);\n    if (o instanceof Boolean) return new Boolean(o);\n    if (o instanceof String) return new String(o);\n    if (Array.isArray(o)) return [\n        ...o\n    ];\n    return {\n        ...o\n    };\n}\nconst $8e1f6d594b3b3e33$export$9cd59f9826255e47 = (obj)=>{\n    let typeString = $8e1f6d594b3b3e33$export$e8bbf06ddab4542c(obj);\n    let type = $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(obj);\n    let attributes = $8e1f6d594b3b3e33$export$fe94072fee8a6976(obj);\n    let clone = $8e1f6d594b3b3e33$var$shallowClone(obj);\n    if (typeString) {\n        $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb(clone, type);\n        if (attributes) $8e1f6d594b3b3e33$export$74da2cba014bdc09(clone, attributes);\n    }\n    return clone;\n};\n\n\nif (!Symbol[\"JSONTag:Null\"]) Symbol[\"JSONTag:Null\"] = Symbol(\"@null\");\nclass $5bb19b6c90f503ab$var$ExtendableProxy {\n    constructor(){\n        return new Proxy(this, {\n            get: (target, name)=>{\n                if (typeof target[name] !== \"undefined\") return target[name];\n                if (name == \"then\" || typeof name == \"symbol\" || name == \"toJSONTag\") return undefined;\n                console.error(\"Attempting to get from Null\", name, typeof name, JSON.stringify(name));\n                throw new Error(\"Attempting to get \" + name + \" from Null\");\n            },\n            set: (target, name, newValue)=>{\n                if (typeof name == \"symbol\") {\n                    target[name] = newValue;\n                    return true;\n                } else {\n                    console.error(\"Attempting to set \" + name + \" in Null to\", newValue);\n                    throw new Error(\"Attempting to set \" + name + \" in Null\");\n                }\n            }\n        });\n    }\n}\nclass $5bb19b6c90f503ab$export$2e2bcd8739ae039 extends $5bb19b6c90f503ab$var$ExtendableProxy {\n    get [Symbol[\"JSONTag:Null\"]]() {\n        return true;\n    }\n    toString() {\n        return \"\";\n    }\n    toJSON() {\n        return null;\n    }\n}\n\n\n\n\n// non streaming handbuilt jsontag parser\n\n\nconst $2c833ebadcbaf103$var$escapee = {\n    '\"': '\"',\n    \"\\\\\": \"\\\\\",\n    \"/\": \"/\",\n    b: \"\\b\",\n    f: \"\\f\",\n    n: \"\\n\",\n    r: \"\\r\",\n    t: \"\t\"\n};\nconst $2c833ebadcbaf103$var$regexes = {\n    color: /^(rgb|hsl)a?\\((\\d+%?(deg|rad|grad|turn)?[,\\s]+){2,3}[\\s\\/]*[\\d\\.]+%?\\)$/i,\n    email: /^[A-Za-z0-9_!#$%&'*+\\/=?`{|}~^.-]+@[A-Za-z0-9.-]+$/,\n    uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n    decimal: /^\\d*\\.?\\d*$/,\n    money: /^[A-Z]+\\$\\d*\\.?\\d*$/,\n    duration: /^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/,\n    phone: /^[+]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?)(?:[ -]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?))*(?:[ ]?(?:x|ext)\\.?[ ]?\\d{1,5})?$/,\n    time: /^(\\d{2}):(\\d{2})(?::(\\d{2}(?:\\.\\d+)?))?$/,\n    date: /^-?[1-9][0-9]{3,}-([0][1-9]|[1][0-2])-([1-2][0-9]|[0][1-9]|[3][0-1])$/,\n    datetime: /^(\\d{4,})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2})(?::(\\d{2}(?:\\.\\d+)?))?Z?$/,\n    range: /^\\[-?(\\d+\\.)?\\d+\\,-?(\\d+\\.)?\\d+\\]$/\n};\nclass $2c833ebadcbaf103$export$2e2bcd8739ae039 {\n    at;\n    ch;\n    input;\n    context;\n    meta;\n    constructor(baseURL = \"http://localhost/\"){\n        this.meta = {\n            index: {\n                id: new Map()\n            },\n            unresolved: new Map(),\n            baseURL: baseURL\n        };\n    }\n    error(message) {\n        throw new $2c833ebadcbaf103$export$f21cea08b0dd60e8(message, this);\n    }\n    next(c) {\n        if (c && c !== this.ch) this.error(\"Expected '\" + c + \"' instead of '\" + this.ch + \"'\");\n        this.ch = this.input.charAt(this.at);\n        this.at += 1;\n        return this.ch;\n    }\n    number(tagName) {\n        let numString = \"\";\n        if (this.ch === \"-\") {\n            numString = \"-\";\n            this.next(\"-\");\n        }\n        while(this.ch >= \"0\" && this.ch <= \"9\"){\n            numString += this.ch;\n            this.next();\n        }\n        if (this.ch === \".\") {\n            numString += \".\";\n            while(this.next() && this.ch >= \"0\" && this.ch <= \"9\")numString += this.ch;\n        }\n        if (this.ch === \"e\" || this.ch === \"E\") {\n            numString += this.ch;\n            this.next();\n            if (this.ch === \"-\" || this.ch === \"+\") {\n                numString += this.ch;\n                this.next();\n            }\n            while(this.ch >= \"0\" && this.ch <= \"9\"){\n                numString += this.ch;\n                this.next();\n            }\n        }\n        let result = new Number(numString).valueOf();\n        if (tagName) switch(tagName){\n            case \"int\":\n                this.isInt(numString);\n                break;\n            case \"uint\":\n                this.isInt(numString, [\n                    0,\n                    Infinity\n                ]);\n                break;\n            case \"int8\":\n                this.isInt(numString, [\n                    -128,\n                    127\n                ]);\n                break;\n            case \"uint8\":\n                this.isInt(numString, [\n                    0,\n                    255\n                ]);\n                break;\n            case \"int16\":\n                this.isInt(numString, [\n                    -32768,\n                    32767\n                ]);\n                break;\n            case \"uint16\":\n                this.isInt(numString, [\n                    0,\n                    65535\n                ]);\n                break;\n            case \"int32\":\n                this.isInt(numString, [\n                    -2147483648,\n                    2147483647\n                ]);\n                break;\n            case \"uint32\":\n                this.isInt(numString, [\n                    0,\n                    4294967295\n                ]);\n                break;\n            case \"timestamp\":\n            case \"int64\":\n                this.isBigInt(numString, [\n                    BigInt(\"-9223372036854775808\"),\n                    BigInt(\"9223372036854775807\")\n                ]);\n                break;\n            case \"uint64\":\n                this.isBigInt(numString, [\n                    0,\n                    BigInt(\"18446744073709551615\")\n                ]);\n                break;\n            case \"float\":\n                this.isFloat(numString);\n                break;\n            case \"float32\":\n                this.isFloat(numString, [\n                    -340000000000000000000000000000000000000,\n                    3.4e+38\n                ]);\n                break;\n            case \"float64\":\n                this.isFloat(numString, [\n                    -170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n                    170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n                ]);\n                break;\n            case \"number\":\n                break;\n            default:\n                this.typeError(tagName, numString);\n                break;\n        }\n        return result;\n    }\n    typeError(type, value) {\n        this.error(\"Syntax error, expected \" + type + \", got: \" + value);\n    }\n    isFloat(float, range) {\n        let test = new Number(parseFloat(float));\n        let str = test.toString();\n        if (float !== str) this.error(\"Syntax Error: expected float value\");\n        if (range) {\n            if (typeof range[0] === \"number\") {\n                if (test < range[0]) this.error(\"Syntax Error: float value out of range\");\n            }\n            if (typeof range[1] === \"number\") {\n                if (test > range[1]) this.error(\"Syntax Error: float value out of range\");\n            }\n        }\n    }\n    isBigInt(int, range) {\n        let test = BigInt(int);\n        let str = test.toString();\n        if (int !== str) this.error(\"Syntax Error: expected integer value\");\n        if (range) {\n            if (typeof range[0] === \"number\" || typeof range[0] === \"bigint\") {\n                if (test < range[0]) this.error(\"Syntax Error: integer value out of range\");\n            }\n            if (typeof range[1] === \"number\" || typeof range[1] === \"bigint\") {\n                if (test > range[1]) this.error(\"Syntax Error: integer value out of range\");\n            }\n        }\n    }\n    isInt(int, range) {\n        let test = new Number(parseInt(int));\n        let str = test.toString();\n        if (int !== str) this.error(\"Syntax Error: expected integer value\");\n        if (range) {\n            if (typeof range[0] === \"number\") {\n                if (test < range[0]) this.error(\"Syntax Error: integer value out of range\");\n            }\n            if (typeof range[1] === \"number\") {\n                if (test > range[1]) this.error(\"Syntax Error: integer value out of range\");\n            }\n        }\n    }\n    isColor(color) {\n        let result = false;\n        if (color.charAt(0) === \"#\") {\n            color = color.substring(1);\n            result = [\n                3,\n                4,\n                6,\n                8\n            ].indexOf(color.length) > -1 && !isNaN(parseInt(color, 16));\n            if (result.toString(16) !== color) this.typeError(\"color\", color);\n        } else result = $2c833ebadcbaf103$var$regexes.color.test(color);\n        if (!result) this.typeError(\"color\", color);\n        return true;\n    }\n    isType(type, value) {\n        let result = $2c833ebadcbaf103$var$regexes[type].test(value);\n        if (!result) this.typeError(type, value);\n        return true;\n    }\n    isUrl(url) {\n        try {\n            return Boolean(new URL(url, this.meta.baseURL));\n        } catch (e) {\n            this.typeError(\"url\", url);\n        }\n    }\n    checkStringType(tagName, value) {\n        if (!tagName) return;\n        switch(tagName){\n            case \"object\":\n            case \"array\":\n            case \"int8\":\n            case \"uint8\":\n            case \"int16\":\n            case \"uint16\":\n            case \"int32\":\n            case \"uint32\":\n            case \"int64\":\n            case \"uint64\":\n            case \"int\":\n            case \"uint\":\n            case \"float32\":\n            case \"float64\":\n            case \"float\":\n            case \"timestamp\":\n                this.typeError(tagName, value);\n                break;\n            case \"uuid\":\n                return this.isType(\"uuid\", value);\n            case \"decimal\":\n                return this.isType(\"decimal\", value);\n            case \"money\":\n                return this.isType(\"money\", value);\n            case \"url\":\n                return this.isUrl(value);\n            case \"link\":\n            case \"string\":\n            case \"text\":\n            case \"blob\":\n            case \"hash\":\n                //anything goes\n                return true;\n            case \"color\":\n                return this.isColor(value);\n            case \"email\":\n                return this.isType(\"email\", value);\n            case \"duration\":\n                return this.isType(\"duration\", value);\n            case \"phone\":\n                return this.isType(\"phone\", value);\n            case \"range\":\n                return this.isType(\"range\", value);\n            case \"time\":\n                return this.isType(\"time\", value);\n            case \"date\":\n                return this.isType(\"date\", value);\n            case \"datetime\":\n                return this.isType(\"datetime\", value);\n        }\n        this.error(\"Syntax error: unknown tagName \" + tagName);\n    }\n    string(tagName) {\n        let value = \"\", hex, i, uffff;\n        if (this.ch !== '\"') this.error(\"Syntax Error\");\n        this.next('\"');\n        while(this.ch){\n            if (this.ch === '\"') {\n                this.next();\n                this.checkStringType(tagName, value);\n                return value;\n            }\n            if (this.ch === \"\\\\\") {\n                this.next();\n                if (this.ch === \"u\") {\n                    uffff = 0;\n                    for(i = 0; i < 4; i++){\n                        hex = parseInt(this.next(), 16);\n                        if (!this.isFinite(hex)) break;\n                        uffff = uffff * 16 + hex;\n                    }\n                    value += String.fromCharCode(uffff);\n                    this.next();\n                } else if (typeof $2c833ebadcbaf103$var$escapee[this.ch] === \"string\") {\n                    value += $2c833ebadcbaf103$var$escapee[this.ch];\n                    this.next();\n                } else break;\n            } else {\n                value += this.ch;\n                this.next();\n            }\n        }\n        this.error(\"Syntax error: incomplete string\");\n    }\n    tag() {\n        let key, val, tagOb = {\n            attributes: {}\n        };\n        if (this.ch !== \"<\") this.error(\"Syntax Error\");\n        this.next(\"<\");\n        key = this.word();\n        if (!key) this.error(\"Syntax Error: expected tag name\");\n        tagOb.tagName = key;\n        this.whitespace();\n        while(this.ch){\n            if (this.ch === \">\") {\n                this.next(\">\");\n                return tagOb;\n            }\n            key = this.word();\n            if (!key) this.error(\"Syntax Error: expected attribute name\");\n            this.whitespace();\n            this.next(\"=\");\n            this.whitespace();\n            val = this.string();\n            tagOb.attributes[key] = val;\n            this.whitespace();\n        }\n        this.error(\"Syntax Error: unexpected end of input\");\n    }\n    whitespace() {\n        while(this.ch)switch(this.ch){\n            case \" \":\n            case \"\t\":\n            case \"\\r\":\n            case \"\\n\":\n                this.next();\n                break;\n            default:\n                return;\n        }\n    }\n    word() {\n        //[a-z][a-z0-9_]*\n        let val = \"\";\n        if (this.ch >= \"a\" && this.ch <= \"z\" || this.ch >= \"A\" && this.ch <= \"Z\") {\n            val += this.ch;\n            this.next();\n        } else this.error(\"Syntax Error: expected word\");\n        while(this.ch >= \"a\" && this.ch <= \"z\" || this.ch >= \"A\" && this.ch <= \"Z\" || this.ch >= \"0\" && this.ch <= \"9\" || this.ch == \"_\"){\n            val += this.ch;\n            this.next();\n        }\n        return val;\n    }\n    boolOrNull(tagName) {\n        let w = this.word();\n        if (!w || typeof w !== \"string\") this.error('Syntax error: expected boolean or null, got \"' + w + '\"');\n        switch(w.toLowerCase()){\n            case \"true\":\n                if (tagName && tagName !== \"boolean\") this.typeError(tagName, w);\n                return true;\n            case \"false\":\n                if (tagName && tagName !== \"boolean\") this.typeError(tagName, w);\n                return false;\n            case \"null\":\n                return null;\n            default:\n                this.error('Syntax error: expected boolean or null, got \"' + w + '\"');\n                break;\n        }\n    }\n    checkUnresolved(item, object, key) {\n        if ($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(item) === \"link\") {\n            let link = \"\" + item;\n            let links = this.meta.unresolved.get(link);\n            if (typeof links === \"undefined\") {\n                this.meta.unresolved.set(link, []);\n                links = this.meta.unresolved.get(link);\n            }\n            links = links.filter((l)=>l.key != key || l.src.deref() != object);\n            links.push({\n                src: new WeakRef(object),\n                key: key\n            });\n            this.meta.unresolved.set(link, links);\n        }\n    }\n    removeUnresolved(item, object, key) {\n        if ($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(item) === \"link\") {\n            let link = \"\" + item;\n            let links = this.meta.unresolved.get(link);\n            if (typeof links === \"undefined\") return;\n            links = links.filter((l)=>l.key != key || l.src.deref() != object);\n            if (links.length) this.meta.unresolved.set(link, links);\n            else this.meta.unresolved.delete(link);\n        }\n    }\n    array() {\n        let item, array = [];\n        if (this.ch !== \"[\") this.error(\"Syntax error\");\n        this.next(\"[\");\n        this.whitespace();\n        if (this.ch === \"]\") {\n            this.next(\"]\");\n            return array;\n        }\n        while(this.ch){\n            item = this.value();\n            this.checkUnresolved(item, array, array.length);\n            array.push(item);\n            this.whitespace();\n            if (this.ch === \"]\") {\n                this.next(\"]\");\n                return array;\n            }\n            this.next(\",\");\n            this.whitespace();\n        }\n        this.error(\"Input stopped early\");\n    }\n    object() {\n        let key, val, object = {};\n        if (this.ch !== \"{\") this.error(\"Syntax Error\");\n        this.next(\"{\");\n        this.whitespace();\n        if (this.ch === \"}\") {\n            this.next(\"}\");\n            return object;\n        }\n        while(this.ch){\n            key = this.string();\n            if (key === \"__proto__\") this.error(\"Attempt at prototype pollution\");\n            this.whitespace();\n            this.next(\":\");\n            val = this.value();\n            object[key] = val;\n            this.checkUnresolved(val, object, key);\n            this.whitespace();\n            if (this.ch === \"}\") {\n                this.next(\"}\");\n                return object;\n            }\n            this.next(\",\");\n            this.whitespace();\n        }\n        this.error(\"Input stopped early\");\n    }\n    value() {\n        let tagOb, result, tagName;\n        this.whitespace();\n        if (this.ch === \"<\") {\n            tagOb = this.tag();\n            tagName = tagOb.tagName;\n            this.whitespace();\n        }\n        switch(this.ch){\n            case \"{\":\n                if (tagName && tagName !== \"object\") this.typeError(tagName, this.ch);\n                result = this.object();\n                break;\n            case \"[\":\n                if (tagName && tagName !== \"array\") this.typeError(tagName, this.ch);\n                result = this.array();\n                break;\n            case '\"':\n                result = this.string(tagName);\n                break;\n            case \"-\":\n                result = this.number(tagName);\n                break;\n            default:\n                if (this.ch >= \"0\" && this.ch <= \"9\") result = this.number(tagName);\n                else result = this.boolOrNull(tagName);\n                break;\n        }\n        if (tagOb) {\n            if (result === null) result = new (0, $5bb19b6c90f503ab$export$2e2bcd8739ae039)();\n            if (typeof result !== \"object\") switch(typeof result){\n                case \"string\":\n                    result = new String(result);\n                    break;\n                case \"number\":\n                    result = new Number(result);\n                    break;\n                default:\n                    this.error(\"Syntax Error: unexpected type \" + typeof result);\n                    break;\n            }\n            if (tagOb.tagName) $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb(result, tagOb.tagName);\n            if (tagOb.attributes) {\n                $8e1f6d594b3b3e33$export$74da2cba014bdc09(result, tagOb.attributes);\n                if (tagOb.attributes?.id) this.meta.index.id.set(tagOb.attributes.id, new WeakRef(result));\n            }\n        }\n        return result;\n    }\n    walk(holder, key, reviver) {\n        var k;\n        var v;\n        var value = holder[key];\n        if (value !== null && typeof value === \"object\" && !(value instanceof String || value instanceof Number || value instanceof Boolean)) {\n            for(k in value)if (Object.prototype.hasOwnProperty.call(value, k)) {\n                v = this.walk(value, k, reviver);\n                if (v !== undefined && (typeof value[k] === \"undefined\" || value[k] !== v)) {\n                    let oldV = value[k];\n                    value[k] = v;\n                    if ($8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(v) === \"link\") {\n                        this.removeUnresolved(oldV, value, k);\n                        this.checkUnresolved(v, value, k);\n                    }\n                } else if (v === undefined) delete value[k];\n            }\n        }\n        return reviver.call(holder, key, value, this.meta);\n    }\n    replaceLink(u, value) {\n        if (typeof value !== \"undefined\") {\n            let src = u.src.deref();\n            if (typeof src !== \"undefined\" && $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd(src[u.key]) === \"link\") {\n                src[u.key] = value;\n                return true;\n            }\n        }\n    }\n    resolveLinks() {\n        if (this.meta.index.id.size > this.meta.unresolved.size) this.meta.unresolved.forEach((links, id)=>{\n            let value = this.meta.index.id.get(id)?.deref();\n            if (value !== undefined) links.forEach((u, i)=>{\n                if (this.replaceLink(u, value)) delete links[i];\n            });\n        });\n        else this.meta.index.id.forEach((ref, id)=>{\n            let value = ref.deref();\n            let links = this.meta.unresolved.get(id);\n            if (value !== undefined && typeof links !== \"undefined\") {\n                links.forEach((u)=>{\n                    this.replaceLink(u, value);\n                });\n                this.meta.unresolved.delete(id);\n            }\n        });\n    }\n    parse(input, reviver) {\n        this.at = 0;\n        this.ch = \" \";\n        this.input = input;\n        const result = this.value();\n        this.whitespace();\n        if (this.ch) this.error(\"Syntax error\");\n        if (typeof reviver == \"function\") this.walk({\n            \"\": result\n        }, \"\", reviver);\n        this.resolveLinks();\n        return result;\n    }\n}\nclass $2c833ebadcbaf103$export$f21cea08b0dd60e8 extends Error {\n    constructor(message, parser){\n        super(message);\n        this.input = parser.input.substring(parser.at - 100, parser.at + 100);\n        this.at = parser.at;\n    }\n}\n\n\nwindow.JSONTag = {\n    stringify: $8e1f6d594b3b3e33$export$fac44ee5b035f737,\n    parse: (input, reviver, meta)=>{\n        const P = new (0, $2c833ebadcbaf103$export$2e2bcd8739ae039)();\n        if (meta) P.meta = meta;\n        return P.parse(input, reviver);\n    },\n    Parser: $2c833ebadcbaf103$export$2e2bcd8739ae039,\n    getType: $8e1f6d594b3b3e33$export$e2b5c5db9e2009fd,\n    setType: $8e1f6d594b3b3e33$export$1bf7f05044e9c5cb,\n    getTypeString: $8e1f6d594b3b3e33$export$e8bbf06ddab4542c,\n    setAttribute: $8e1f6d594b3b3e33$export$9fec4d97f1922e0b,\n    getAttribute: $8e1f6d594b3b3e33$export$735ee1799fd02602,\n    addAttribute: $8e1f6d594b3b3e33$export$5dcb5c23b6ba980a,\n    removeAttribute: $8e1f6d594b3b3e33$export$6399f3bb52316b2c,\n    getAttributes: $8e1f6d594b3b3e33$export$fe94072fee8a6976,\n    setAttributes: $8e1f6d594b3b3e33$export$74da2cba014bdc09,\n    getAttributesString: $8e1f6d594b3b3e33$export$f4cc4d0befd5def7,\n    isNull: $8e1f6d594b3b3e33$export$630801d484da15df,\n    clone: $8e1f6d594b3b3e33$export$9cd59f9826255e47,\n    Link: $c2efebb60248672c$export$2e2bcd8739ae039,\n    Null: $5bb19b6c90f503ab$export$2e2bcd8739ae039\n};\n\n})();\n//# sourceMappingURL=browser.js.map\n","import Null from './lib/Null.mjs'\nimport Link from './lib/Link.mjs'\nimport * as attr from './lib/functions.mjs'\nimport Parser from './lib/Parser.mjs'\n\nwindow.JSONTag = {\n\tstringify: attr.stringify,\n\tparse: (input, reviver, meta) => {\n\t\tconst P = new Parser()\n\t\tif (meta) {\n\t\t\tP.meta = meta\n\t\t}\n\t\treturn P.parse(input, reviver)\n\t},\n\tParser,\n\n\tgetType: attr.getType,\n\tsetType: attr.setType,\n\tgetTypeString: attr.getTypeString,\n\n\tsetAttribute: attr.setAttribute,\n\tgetAttribute: attr.getAttribute,\n\taddAttribute: attr.addAttribute,\n\tremoveAttribute: attr.removeAttribute,\n\tgetAttributes: attr.getAttributes,\n\tsetAttributes: attr.setAttributes,\n\tgetAttributesString: attr.getAttributesString,\n\n\tisNull: attr.isNull,\n\tclone: attr.clone,\n\n\tLink,\n\tNull\n}","import { getType, setType, getAttributes, setAttributes } from \"./functions.mjs\"\nif (!Symbol['JSONTag:Null']) {\n\tSymbol['JSONTag:Null'] = Symbol('@null')\n}\n\nclass ExtendableProxy {\n\tconstructor()\n\t{\n\t\treturn new Proxy(this,{\n\t\t\tget: (target,name) => {\n\t\t\t\tif (typeof target[name] !== 'undefined') {\n\t\t\t\t\treturn target[name]\n\t\t\t\t}\n\t\t\t\tif (name == 'then' || typeof name == 'symbol' || name == 'toJSONTag') {\n\t\t\t\t\treturn undefined\n\t\t\t\t}\n\t\t\t\tconsole.error('Attempting to get from Null', name, typeof name, JSON.stringify(name))\n\t\t\t\tthrow new Error('Attempting to get '+name+' from Null')\n\t\t\t},\n\t\t\tset: (target,name,newValue) => {\n\t\t\t\tif (typeof name == 'symbol') {\n\t\t\t\t\ttarget[name] = newValue\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Attempting to set '+name+' in Null to',newValue)\n\t\t\t\t\tthrow new Error('Attempting to set '+name+' in Null')\t\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n}\n\nexport default class Null extends ExtendableProxy {\n\n\tget [Symbol['JSONTag:Null']]() {\n\t\treturn true\n\t}\n\n\ttoString()\n\t{\n\t\treturn ''\n\t}\n\n\ttoJSON()\n\t{\n\t\treturn null\n\t}\n\n}","import Link from './Link.mjs'\n\nif (!Symbol['JSONTag:Type']) {\n\tSymbol['JSONTag:Type'] = Symbol('@type')\n}\nif (!Symbol['JSONTag:Attributes']) {\n\tSymbol['JSONTag:Attributes'] = Symbol('@attributes')\n}\nif (!Symbol['JSONTag:Null']) {\n\tSymbol['JSONTag:Null'] = Symbol('@null')\n}\n// keep reference to original JSON.stringify, in case someone monkeypatches it\nconst jsonStringify = JSON.stringify\n\nexport const stringify = (value, replacer=null, space=\"\") => {\n\n\tconst objectReferences = new WeakMap()\n\n\tlet indent = \"\"\n\tlet gap = \"\"\n\n\tif (typeof space === \"number\") {\n\t\tindent += \" \".repeat(space)\n\t} else if (typeof space === \"string\") {\n\t\tindent = space\n\t}\n\n\tif (replacer && typeof replacer !== \"function\" && (\n        typeof replacer !== \"object\"\n        || typeof replacer.length !== \"number\"\n    )) {\n        throw new Error(\"JSONTag.stringify\");\n    }\n\n\tconst encodeProperties = (obj) => {\n\t\tlet mind = gap\n\t\tgap += indent\n\t\tlet gapstart = \"\"\n\t\tlet gapend = \"\"\n\t\tlet keys = Object.keys(obj)\n\t\tif (Array.isArray(replacer)) {\n\t\t\tkeys = keys.filter(key => replacer.indexOf(key)!==-1)\n\t\t} \n\t\tif (gap) {\n\t\t\tgapstart =\"\\n\"+gap\n\t\t\tgapend = \"\\n\"+mind\n\t\t}\n\t\tlet result = gapstart+keys.map(prop => {\n\t\t\tif (obj[prop]===undefined) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\treturn jsonStringify(prop)+':'+str(prop, obj)\n\t\t}).filter(Boolean).join(\",\"+gapstart)+gapend\n\t\tgap = mind\n\t\treturn result\n\t}\n\n\tconst encodeEntries = (arr) => {\n\t\tlet mind = gap\n\t\tgap += indent\n\t\tlet gapstart = \"\"\n\t\tlet gapend = \"\"\n\t\tif (gap) {\n\t\t\tgapstart = \"\\n\"+gap\n\t\t\tgapend = \"\\n\"+mind\n\t\t}\n\t\tlet result = gapstart+arr.map((value,index) => {\n\t\t\treturn str(index, arr)\n\t\t}).join(\",\"+gapstart)+gapend\n\t\tgap = mind\n\t\treturn result\n\t}\n\n\t/**\n\t * Walks over all objects in value to set ids if needed\n\t */\n\tconst checkCircular = new WeakMap()\n\tfunction createIds(value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (let v of value) {\n\t\t\t\tcreateIds(v)\n\t\t\t}\n\t\t} else if (value && typeof value == 'object') { //getType(value)=='object') {\n\t\t \tif (checkCircular.has(value)) {\n\t\t \t \tlet id = getAttribute(value, 'id')\n\t\t \t\tif (!id) {\n\t\t \t\t\tcreateId(value)\n\t\t \t\t}\n\t\t \t} else {\n\t\t\t \tcheckCircular.set(value, true)\n\t\t\t\tfor (let k in value) {\n\t\t\t\t    createIds(value[k])\n\t\t\t\t}\n\t\t \t}\n\t\t}\n\t}\n\n\tconst str = (key, holder) => {\n\t\tlet value = holder[key]\n\t\tif (typeof replacer === 'function' && key!=='') {\n\t\t\tvalue = replacer.call(holder, key, value)\n\t\t}\n\t\tif (getType(value) === 'object' && objectReferences.has(value)) {\n\t\t\tlet id = getAttribute(value, 'id')\n\t\t\tif (!id) {\n\t\t\t\t// FIXME: this is too late, value may already have been stringified, without id earlier\n\t\t\t\tid = createId(value)\n\t\t\t}\n\t\t\treturn '<link>\"'+id+'\"'\n\t\t}\n\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\treturn 'null'\n\t\t}\n\t\tif (getType(value) === 'object') {\n\t\t\tobjectReferences.set(value, true)\n\t\t}\n\t\tif (typeof value.toJSONTag == 'function') {\n\t\t\tvalue = value.toJSONTag()\n\t\t} else if (typeof value.toJSON == 'function') {\n\t\t\tlet type = getType(value)\n\t\t\tlet attr = getAttributes(value)\n\t\t\tlet jsonValue = value.toJSON()\n\t\t\tif (typeof jsonValue == 'string') {\n\t\t\t\tvalue = new String(jsonValue) // convert to object so we can add type/attributes\n\t\t\t} else if (typeof jsonValue == 'number') {\n\t\t\t\tvalue = new Number(jsonValue) // convert to object so we can add type/attributes\n\t\t\t} else if (jsonValue==null) { // null cannot have types/attributes, so do this by hand\n\t\t\t\tif (value!==null) {\n\t\t\t\t\treturn getTypeString(value)+'null'\n\t\t\t\t}\n\t\t\t\treturn 'null'\n\t\t\t} else { // use the value from toJSON()\n\t\t\t\tvalue = jsonValue\n\t\t\t}\n\t\t\tif (attr) {\n\t\t\t\tsetAttributes(value, attr)\n\t\t\t}\n\t\t\tif (type) {\n\t\t\t\tsetType(value, type)\n\t\t\t}\n\t\t}\n\t\tif (Array.isArray(value)) {\n\t\t\treturn getTypeString(value) + \"[\"+encodeEntries(value)+\"]\"\n\t\t} else if (value instanceof Object) {\n\t\t\tswitch (getType(value)) {\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'decimal':\n\t\t\t\tcase 'money':\n\t\t\t\tcase 'link':\n\t\t\t\tcase 'text':\n\t\t\t\tcase 'blob':\n\t\t\t\tcase 'color':\n\t\t\t\tcase 'email':\n\t\t\t\tcase 'hash':\n\t\t\t\tcase 'duration':\n\t\t\t\tcase 'phone':\n\t\t\t\tcase 'url':\n\t\t\t\tcase 'uuid':\n\t\t\t\tcase 'date':\n\t\t\t\tcase 'time':\n\t\t\t\tcase 'datetime':\n\t\t\t\t\treturn getTypeString(value) + jsonStringify(''+value, replacer, space)\n\t\t\t\tbreak\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'uint':\n\t\t\t\tcase 'int8':\n\t\t\t\tcase 'uint8':\n\t\t\t\tcase 'int16':\n\t\t\t\tcase 'uint16':\n\t\t\t\tcase 'int32':\n\t\t\t\tcase 'uint32':\n\t\t\t\tcase 'int64':\n\t\t\t\tcase 'uint64':\n\t\t\t\tcase 'float':\n\t\t\t\tcase 'float32':\n\t\t\t\tcase 'float64':\n\t\t\t\tcase 'timestamp':\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn getTypeString(value) + jsonStringify(value, replacer, space)\n\t\t\t\tbreak\n\t\t\t\tcase 'array': \n\t\t\t\t\tlet entries = encodeEntries(value) // calculate children first so parent references can add id attribute\n\t\t\t\t\treturn getTypeString(value) + '[' + entries + '}'\n\t\t\t\tbreak\n\t\t\t\tcase 'object': \n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\treturn \"null\"\n\t\t\t\t\t}\n\t\t\t\t\tlet props = encodeProperties(value); // calculate children first so parent references can add id attribute\n\t\t\t\t\treturn getTypeString(value) + '{' + props + '}'\n\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(getType(value)+' type not yet implemented')\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\treturn jsonStringify(value, replacer, space)\n\t\t}\n\t}\n\n\t// first check if there are circular references\n\t// if so, make sure that the referenced objects have an id attribute\n\tcreateIds(value)\n\tconst result = str(\"\", {\"\": value})\n\treturn result\n}\n\nfunction createId(value) {\n\tif (typeof crypto.randomUUID === 'function') {\n\t\tvar id = crypto.randomUUID()\n\t} else {\n\t\t// Fallback for when crypto.randomUUID is not available\n\t\tlet replacer = c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4)\n\n\t\tif (typeof crypto === 'undefined') {\n\t\t\t// Fallback even further for when crypto API is not available\n\t\t\treplacer = c => (c ^ Math.random() * 256 & 15 >> c / 4)\n\t\t}\n\n\t\tvar id = ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => replacer(c).toString(16));\n\t}\n\tsetAttribute(value, 'id', id)\n\treturn id\n}\n\n\nexport const isNull = (v) => {\n\treturn (v === null) || v?.[Symbol['JSONTag:Null']]==true\n}\n\nexport const getType = (obj) => {\n\tlet type = typeof obj\n\tif (obj && type == 'object' \n\t\t&& (obj instanceof String || obj instanceof Number || isNull(obj))\n\t\t&& (typeof obj[Symbol['JSONTag:Type']] != 'undefined') \n\t) {\n\t\ttype = obj[Symbol['JSONTag:Type']]\n\t} else if (Array.isArray(obj)) {\n\t\ttype = 'array'\n\t} else if (obj instanceof Number) {\n\t\ttype = 'number'\n\t} else if (obj instanceof Boolean) {\n\t\ttype = 'boolean'\n\t} else if (obj instanceof Link) {\n\t\ttype = 'link'\n\t}\n\treturn type\n}\n\nexport const types = [\n\t'object','array','string','number','boolean',\t\t\t\t// JSON\n\t'decimal','money','uuid','url','link','date','time','datetime', 'duration', 'timestamp',\n\t'text', 'blob', 'color', 'email', 'hash', 'phone',\n\t'int', 'int8', 'int16', 'int32', 'int64',\n\t'uint', 'uint8', 'uint16', 'uint32', 'uint64',\n\t'float', 'float32', 'float64'\n]\n\nexport const setType = (obj, type) => {\n\tif (typeof obj !== 'object') {\n\t\tthrow new TypeError('JSONTag can only add attributes to objects, convert literals to objects first')\n\t}\n\tif (!types.includes(type)) {\n\t\tthrow new TypeError('unknown type '+type)\n\t}\n\tif (Array.isArray(obj)) {\n\t\tif (type !== 'array') {\n\t\t\tthrow new TypeError('JSONTag can only set type \"array\" on an array')\n\t\t}\n\t\treturn\n\t} else if (obj instanceof String || obj instanceof Number || isNull(obj)) {\n\t\tobj[Symbol['JSONTag:Type']] = type\n\t} else if (type == 'link' && obj instanceof Link) {\n\t\t// do nothing\n\t} else if (type !== 'object') {\n\t\tthrow new TypeError('JSONTag can only set type \"object\" on an object')\n\t}\n}\n\nexport const setAttribute = (obj, attr, value) => {\n\tif (!obj || typeof obj !== 'object') {\n\t\tthrow new TypeError('JSONTag can only add attributes to objects, convert literals to objects first')\n\t}\n\tif (Array.isArray(value)) {\n\t\tvalue = value.join(' ')\n\t}\n\tif (typeof value !== 'string') {\n\t\tthrow new TypeError('attribute values must be a string or an array of strings')\n\t}\n\tif (value.indexOf('\"')!==-1) {\n\t\tthrow new TypeError('attribute values must not contain \" character')\n\t}\n\tif (value.indexOf(' ')!==-1) {\n\t\tvalue = value.split(\" \")\n\t}\n\tconst attributes = obj[Symbol['JSONTag:Attributes']] ?? {}\n\tattributes[attr] = value\n\tobj[Symbol['JSONTag:Attributes']] = attributes\n}\n\nexport const setAttributes = (obj, attributes) => {\n\tif (typeof obj !== 'object') {\n\t\tthrow new TypeError('JSONTag can only add attributes to objects, convert literals to objects first')\n\t}\n\tif (typeof attributes !== 'object') {\n\t\tthrow new TypeError('attributes param must be an object')\n\t}\n\tObject.keys(attributes).forEach(key => {\n\t\tsetAttribute(obj, key, attributes[key])\n\t})\n}\n\nexport const getAttribute = (obj, attr) => {\n\tconst attributes = obj[Symbol['JSONTag:Attributes']] ?? {}\n\treturn attributes[attr]\n}\n\nexport const addAttribute = (obj, attr, value) => {\n\tif (typeof value !== 'string') {\n\t\tthrow new TypeError('attribute values must be a string')\n\t}\n\tif (value.indexOf('\"')!==-1) {\n\t\tthrow new TypeError('attribute values must not contain \" characters')\n\t}\t\n\tconst attributes = obj[Symbol['JSONTag:Attributes']] ?? {}\n\tif (typeof attributes[attr] === 'undefined') {\n\t\tsetAttribute(obj, attr, value)\n\t} else {\n\t\tif (!Array.isArray(attributes[attr])) {\n\t\t\tattributes[attr] = [ attributes[attr] ]\n\t\t}\n\t\tif (value.indexOf(' ')!==-1) {\n\t\t\tvalue = value.split(\" \")\n\t\t} else {\n\t\t\tvalue = [ value ]\n\t\t}\n\t\tattributes[attr] = attributes[attr].concat(value)\n\t\tobj[Symbol['JSONTag:Attributes']] = attributes\n\t}\n}\n\nexport const removeAttribute = (obj, attr) => {\n\tconst attributes = obj[Symbol['JSONTag:Attributes']]\n\tif ( typeof attributes?.[attr] !== 'undefined') {\n\t\tdelete attributes[attr]\n\t}\n}\n\nexport const getAttributes = (obj) => {\n\tconst attributes = obj[Symbol['JSONTag:Attributes']] ?? {}\n\treturn Object.assign({},attributes)\n}\n\nexport const getAttributesString = (obj) => {\n\treturn Object.entries(getAttributes(obj))\n\t\t.map(([attr, attrValue]) => {\n\t\t\tif (Array.isArray(attrValue)) {\n\t\t\t\tattrValue = attrValue.join(' ')\n\t\t\t}\t\n\t\t\treturn attr+'=\"'+attrValue+'\"'\n\t\t})\n\t\t.join(' ')\n}\n\nexport const getTypeString = (obj) => {\n\tlet type = getType(obj)\n\tlet attributes = getAttributes(obj)\n\tlet attributesString = Object.entries(attributes)\n\t\t.map(([attr, attrValue]) => {\n\t\t\tif (Array.isArray(attrValue)) {\n\t\t\t\tattrValue = attrValue.join(' ')\n\t\t\t}\t\n\t\t\treturn attr+'=\"'+attrValue+'\"'\n\t\t})\n\t\t.join(' ')\n\tif (!attributesString) {\n\t\tif (['object','array','string','number','boolean'].indexOf(type)!==-1) {\n\t\t\ttype = ''\n\t\t}\n\t}\n\tif (type || attributesString) {\n\t\treturn '<' + [type, attributesString].filter(Boolean).join(' ') + '>'\n\t} else {\n\t\treturn '';\n\t}\n}\n\nfunction shallowClone(o) {\n\tif (o instanceof Number) {\n\t\treturn new Number(o)\n\t}\n\tif (o instanceof Boolean) {\n\t\treturn new Boolean(o)\n\t}\n\tif (o instanceof String) {\n\t\treturn new String(o)\n\t}\n\tif (Array.isArray(o)) {\n\t\treturn [ ...o ]\n\t}\n\treturn { ...o }\n}\n\nexport const clone = (obj) => {\n\tlet typeString = getTypeString(obj)\n\tlet type = getType(obj)\n\tlet attributes = getAttributes(obj)\n\tlet clone = shallowClone(obj)\n\tif (typeString) {\n\t\tsetType(clone, type)\n\t\tif (attributes) {\n\t\t\tsetAttributes(clone, attributes)\n\t\t}\n\t}\n\treturn clone\n}","import { getAttributes, setAttributes, getType, setType } from \"./functions.mjs\"\n\nexport default class Link {\n\t#url;\n\n\tconstructor(url)\n\t{\n\t\tif (typeof url !== 'string') {\n\t\t\tthrow new Error('not a url:',url)\n\t\t}\n\t\tthis.#url = ''+url\n\t\tsetType(this, 'link')\n\t}\n\n\tstatic from(url)\n\t{\n\t\tif (url instanceof Link) {\n\t\t\treturn url\n\t\t}\n\t\tif (typeof url !== 'string') {\n\t\t\tthrow new Error('not a url:',url)\n\t\t}\n\t\treturn new Link(url)\n\t}\n\n\tget value()\n\t{\n\t\treturn this.#url\n\t}\n\n\ttoString()\n\t{\n\t\treturn this.#url\n\t}\n\n\ttoJSON()\n\t{\n\t\treturn this.#url\n\t}\n\n\ttoJSONTag()\n\t{\n\t\tlet result = new String(this.#url)\n\t\tlet attributes = getAttributes(this)\n\t\tif (attributes) {\n\t\t\tsetAttributes(result, attributes)\n\t\t}\n\t\tsetType(result, 'link')\n\t\treturn result\n\t}\n\n}","// non streaming handbuilt jsontag parser\nimport * as JSONTag from './functions.mjs'\nimport Null from './Null.mjs'\n\nconst escapee = {\n\t'\"': '\"',\n\t\"\\\\\":\"\\\\\",\n\t'/': '/',\n\tb: \"\\b\",\n\tf: \"\\f\",\n\tn: \"\\n\",\n\tr: \"\\r\",\n\tt: \"\\t\"\n}\n\nconst regexes = {\n    color: /^(rgb|hsl)a?\\((\\d+%?(deg|rad|grad|turn)?[,\\s]+){2,3}[\\s\\/]*[\\d\\.]+%?\\)$/i,\n    email: /^[A-Za-z0-9_!#$%&'*+\\/=?`{|}~^.-]+@[A-Za-z0-9.-]+$/,\n    uuid:  /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n    decimal: /^\\d*\\.?\\d*$/,\n    money: /^[A-Z]+\\$\\d*\\.?\\d*$/,\n    duration: /^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/,\n    phone: /^[+]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?)(?:[ -]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?))*(?:[ ]?(?:x|ext)\\.?[ ]?\\d{1,5})?$/,\n    time: /^(\\d{2}):(\\d{2})(?::(\\d{2}(?:\\.\\d+)?))?$/,\n    date: /^-?[1-9][0-9]{3,}-([0][1-9]|[1][0-2])-([1-2][0-9]|[0][1-9]|[3][0-1])$/,\n    datetime: /^(\\d{4,})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2})(?::(\\d{2}(?:\\.\\d+)?))?Z?$/,\n    range: /^\\[-?(\\d+\\.)?\\d+\\,-?(\\d+\\.)?\\d+\\]$/\n}\n\nexport default class Parser\n{\n\tat\n\tch\n\tinput\n\tcontext\n\tmeta\n\n\tconstructor(baseURL = 'http://localhost/')\n\t{\n\t\tthis.meta = {\n\t\t\tindex: {\n\t\t\t\tid: new Map()\n\t\t\t},\n\t\t\tunresolved: new Map(),\n\t\t\tbaseURL\n\t\t}\n\t}\n\n\terror(message)\n\t{\n\t\tthrow new SyntaxError(message, this)\n\t}\n\n\tnext(c)\n\t{\n\t\tif (c && c!==this.ch) {\n            this.error(\"Expected '\"+c+\"' instead of '\"+this.ch+\"'\")\n        }\n        this.ch = this.input.charAt(this.at)\n        this.at+=1\n        return this.ch\n\t}\n\t\n\tnumber(tagName)\n\t{\n        let numString = ''\n        if (this.ch==='-') {\n            numString = '-'\n            this.next('-')\n        }\n        while(this.ch>='0' && this.ch<='9') {\n            numString += this.ch\n            this.next()\n        }\n        if (this.ch==='.') {\n            numString+='.'\n            while(this.next() && this.ch >= '0' && this.ch <= '9') {\n                numString += this.ch\n            }\n        }\n        if (this.ch === 'e' || this.ch === 'E') {\n            numString += this.ch\n            this.next()\n            if (this.ch === '-' || this.ch === '+') {\n                numString += this.ch\n                this.next()\n            }\n            while (this.ch >= '0' && this.ch <= '9') {\n                numString += this.ch\n                this.next()\n            }\n        }\n        let result = new Number(numString).valueOf()\n        if (tagName) {\n            switch(tagName) {\n                case \"int\":\n                    this.isInt(numString)\n                    break\n                case \"uint\":\n                    this.isInt(numString, [0,Infinity])\n                    break\n                case \"int8\":\n                    this.isInt(numString, [-128,127])\n                    break\n                case \"uint8\":\n                    this.isInt(numString, [0,255])\n                    break\n                case \"int16\":\n                    this.isInt(numString, [-32768,32767])\n                    break\n                case \"uint16\":\n                    this.isInt(numString, [0,65535])\n                    break\n                case \"int32\":\n                    this.isInt(numString, [-2147483648, 2147483647])\n                    break\n                case \"uint32\":\n                    this.isInt(numString, [0,4294967295])\n                    break\n                case \"timestamp\":\n                case \"int64\":\n                    this.isBigInt(numString, [BigInt(\"-9223372036854775808\"),BigInt(\"9223372036854775807\")])\n                    break\n                case \"uint64\":\n                    this.isBigInt(numString, [0,BigInt(\"18446744073709551615\")])\n                    break\n                case \"float\":\n                    this.isFloat(numString)\n                    break\n                case \"float32\":\n                    this.isFloat(numString, [-3.4e+38,3.4e+38])\n                    break\n                case \"float64\":\n                    this.isFloat(numString, [-1.7e+308,+1.7e+308])\n                    break\n                case \"number\":\n                    //FIXME: what to check? should already be covered by JSON parsing rules?\n                    break\n                default:\n                    this.typeError(tagName,numString)\n                    break\n            }\n        }\n        return result\t\t\n\t}\n\n\ttypeError(type, value)\n\t{\n\t\tthis.error('Syntax error, expected '+type+', got: '+value)\t\n\t}\n\n\tisFloat(float, range)\n\t{\n\t\tlet test = new Number(parseFloat(float))\n        let str = test.toString()\n        if (float!==str) {\n            this.error('Syntax Error: expected float value')\n        }\n        if (range) {\n            if (typeof range[0] === 'number') {\n                if (test<range[0]) {\n                    this.error('Syntax Error: float value out of range')\n                }\n            }\n            if (typeof range[1] === 'number') {\n                if (test>range[1]) {\n                    this.error('Syntax Error: float value out of range')    \n                }\n            }\n        }\n\t}\n\n\tisBigInt(int, range)\n\t{\n        let test = BigInt(int)\n        let str = test.toString()\n        if (int!==str) {\n            this.error('Syntax Error: expected integer value')\n        }\n        if (range) {\n            if (typeof range[0] === 'number' || typeof range[0] === 'bigint') {\n                if (test<range[0]) {\n                    this.error('Syntax Error: integer value out of range')\n                }\n            }\n            if (typeof range[1] === 'number' || typeof range[1] === 'bigint') {\n                if (test>range[1]) {\n                    this.error('Syntax Error: integer value out of range')    \n                }\n            }\n        }\n\t}\n\n\tisInt(int, range)\n    {\n        let test = new Number(parseInt(int))\n        let str = test.toString()\n        if (int!==str) {\n            this.error('Syntax Error: expected integer value')\n        }\n        if (range) {\n            if (typeof range[0] === 'number') {\n                if (test<range[0]) {\n                    this.error('Syntax Error: integer value out of range')\n                }\n            }\n            if (typeof range[1] === 'number') {\n                if (test>range[1]) {\n                    this.error('Syntax Error: integer value out of range')    \n                }\n            }\n        }\n    }\n\n    isColor(color)\n    {\n        let result = false\n        if (color.charAt(0) === \"#\") {\n            color = color.substring(1)\n            result = ([3, 4, 6, 8].indexOf(color.length) > -1) && !isNaN(parseInt(color, 16))\n            if (result.toString(16)!==color) {\n                this.typeError('color', color)\n            }\n        } else {\n            result = regexes.color.test(color)\n        }\n        if (!result) {\n            this.typeError('color',color)\n        }\n        return true\n    }\n\n\n    isType(type, value)\n    {\n        let result = regexes[type].test(value)\n        if (!result) {\n            this.typeError(type, value)\n        }\n        return true    \t\n    }\n\n    isUrl(url)\n    {\n        try {\n            return Boolean(new URL(url, this.meta.baseURL))\n        } catch(e) {\n            this.typeError('url',url)\n        }\n    }\n\n    checkStringType(tagName, value)\n    {\n        if (!tagName) {\n            return\n        }\n        switch(tagName){\n            case \"object\":\n            case \"array\":\n            case \"int8\":\n            case \"uint8\":\n            case \"int16\":\n            case \"uint16\":\n            case \"int32\":\n            case \"uint32\":\n            case \"int64\":\n            case \"uint64\":\n            case \"int\":\n            case \"uint\":\n            case \"float32\":\n            case \"float64\":\n            case \"float\":\n            case \"timestamp\":\n                this.typeError(tagName, value)\n                break\n            case \"uuid\":\n                return this.isType('uuid',value)\n            case \"decimal\":\n                return this.isType('decimal',value)\n            case \"money\":\n                return this.isType('money',value)\n            case \"url\":\n                return this.isUrl(value)\n            case \"link\":\n            case \"string\":\n            case \"text\":\n            case \"blob\":\n            case \"hash\":\n                //anything goes\n                return true\n            case \"color\":\n                return this.isColor(value)\n            case \"email\":\n                return this.isType('email',value)\n            case \"duration\":\n                return this.isType('duration',value)\n            case \"phone\":\n                return this.isType('phone',value)\n            case \"range\":\n                return this.isType('range',value)\n            case \"time\":\n                return this.isType('time',value)\n            case \"date\":\n                return this.isType('date',value)\n            case \"datetime\":\n                return this.isType('datetime',value)\n        }\n        this.error('Syntax error: unknown tagName '+tagName)\n    }\n\n    string(tagName)\n    {\n        let value = \"\", hex, i, uffff;\n        if (this.ch !== '\"') {\n            this.error(\"Syntax Error\")\n        }\n        this.next('\"')\n        while(this.ch) {\n            if (this.ch==='\"') {\n                this.next()\n                this.checkStringType(tagName, value)\n                return value\n            }\n            if (this.ch==='\\\\') {\n                this.next()\n                if (this.ch==='u') {\n                    uffff=0\n                    for (i=0; i<4; i++) {\n                        hex = parseInt(this.next(), 16)\n                        if (!this.isFinite(hex)) {\n                            break\n                        }\n                        uffff = uffff * 16 + hex\n                    }\n                    value += String.fromCharCode(uffff)\n                    this.next()\n                } else if (typeof escapee[this.ch] === 'string') {\n                    value += escapee[this.ch]\n                    this.next()\n                } else {\n                    break\n                }\n            } else {\n                value += this.ch\n                this.next()\n            }\n        }\n        this.error(\"Syntax error: incomplete string\")\n    }\n\n    tag()\n    {\n        let key, val, tagOb={\n            attributes: {}\n        }\n        if (this.ch !== '<') {\n            this.error(\"Syntax Error\")\n        }\n        this.next('<')\n        key = this.word()\n        if (!key) {\n            this.error('Syntax Error: expected tag name')\n        }\n        tagOb.tagName = key\n        this.whitespace()\n        while(this.ch) {\n            if (this.ch==='>') {\n                this.next('>')\n                return tagOb\n            }\n            key = this.word()\n            if (!key) {\n                this.error('Syntax Error: expected attribute name')\n            }\n            this.whitespace()\n            this.next('=')\n            this.whitespace()\n            val = this.string()\n            tagOb.attributes[key] = val\n            this.whitespace()\n        }\n        this.error('Syntax Error: unexpected end of input')\n    }\n\n    whitespace()\n    {\n        while (this.ch) {\n            switch(this.ch) {\n                case ' ':\n                case \"\\t\":\n                case \"\\r\":\n                case \"\\n\":\n                    this.next()\n                break\n                default:\n                    return\n                break\n            }\n        }\n    }\n\n    word()\n    {\n        //[a-z][a-z0-9_]*\n        let val='';\n        if ((this.ch>='a' && this.ch<='z') || (this.ch>='A' && this.ch<='Z')) {\n            val += this.ch\n            this.next()\n        } else {\n            this.error('Syntax Error: expected word')\n        }\n        while((this.ch>='a' && this.ch<='z') \n        \t|| (this.ch>='A' && this.ch<='Z') \n        \t|| (this.ch>='0' && this.ch<='9') \n        \t|| this.ch=='_'\n        ) {\n            val += this.ch\n            this.next()\n        }\n        return val\n    }\n\n    boolOrNull(tagName)\n    {\n        let w = this.word()\n        if (!w || typeof w !== 'string') {\n            this.error('Syntax error: expected boolean or null, got \"'+w+'\"')\n        }\n        switch(w.toLowerCase()) {\n            case 'true':\n                if (tagName && tagName!=='boolean') {\n                    this.typeError(tagName,w)\n                }\n                return true\n            break\n            case 'false':\n                if (tagName && tagName!=='boolean') {\n                    this.typeError(tagName,w)\n                }\n                return false \n            break\n            case 'null':\n                return null\n            break\n            default:\n                this.error('Syntax error: expected boolean or null, got \"'+w+'\"')\n            break\n        }\n    }\n\n    checkUnresolved(item, object, key)\n    {\n        if (JSONTag.getType(item)==='link') {\n            let link = ''+item\n            let links = this.meta.unresolved.get(link)\n            if (typeof links === 'undefined') {\n                this.meta.unresolved.set(link,[])\n                links = this.meta.unresolved.get(link)\n            }\n            links = links.filter(l => l.key!=key || l.src.deref()!=object)\n            links.push({\n                src: new WeakRef(object),\n                key: key\n            })\n            this.meta.unresolved.set(link, links)\n        }\n    }\n\n    removeUnresolved(item, object, key)\n    {\n        if (JSONTag.getType(item)==='link') {\n            let link = ''+item\n            let links = this.meta.unresolved.get(link)\n            if (typeof links === 'undefined') {\n                return\n            }\n            links = links.filter(l => l.key!=key || l.src.deref()!=object)\n            if (links.length) {\n                this.meta.unresolved.set(link, links)\n            } else {\n                this.meta.unresolved.delete(link)\n            }\n        }            \n    }\n\n    array()\n    {\n        let item, array = []\n        if (this.ch !== '[') {\n            this.error(\"Syntax error\")\n        }\n        this.next('[')\n        this.whitespace()\n        if (this.ch===']') {\n            this.next(']')\n            return array\n        }\n        while(this.ch) {\n            item = this.value()\n            this.checkUnresolved(item, array, array.length)\n            array.push(item)\n            this.whitespace()\n            if (this.ch===']') {\n                this.next(']')\n                return array\n            }\n            this.next(',')\n            this.whitespace()\n        }\n        this.error(\"Input stopped early\")\n    }\n\n    object()\n    {\n        let key, val, object={}\n        if (this.ch !== '{') {\n            this.error(\"Syntax Error\")\n        }\n        this.next('{')\n        this.whitespace()\n        if (this.ch==='}') {\n            this.next('}')\n            return object\n        }\n        while(this.ch) {\n            key = this.string()\n            if (key==='__proto__') {\n                this.error(\"Attempt at prototype pollution\")\n            }\n            this.whitespace()\n            this.next(':')\n            val = this.value()\n            object[key] = val\n            this.checkUnresolved(val, object, key)\n            this.whitespace()\n            if (this.ch==='}') {\n                this.next('}')\n                return object\n            }\n            this.next(',')\n            this.whitespace()\n        }\n        this.error(\"Input stopped early\")\n    }\n\n    value()\n    {\n        let tagOb, result, tagName;\n        this.whitespace()\n        if (this.ch==='<') {\n            tagOb = this.tag()\n            tagName = tagOb.tagName\n            this.whitespace()\n        }\n        switch(this.ch) {\n            case '{':\n                if (tagName && tagName!=='object') {\n                    this.typeError(tagName, this.ch)\n                }\n                result = this.object()\n            break\n            case '[':\n                if (tagName && tagName!=='array') {\n                    this.typeError(tagName, this.ch)\n                }\n                result = this.array()\n            break\n            case '\"':\n                result = this.string(tagName)\n            break\n            case '-':\n                result = this.number(tagName)\n            break\n            default:\n                if (this.ch>='0' && this.ch<='9') {\n                    result = this.number(tagName)\n                } else {\n                    result = this.boolOrNull(tagName)\n                }\n            break\n        }\n        if (tagOb) {\n            if (result === null) {\n                result = new Null()\n            }\n            if (typeof result !== 'object') {\n                switch(typeof result) {\n                    case 'string':\n                        result = new String(result)\n                        break\n                    case 'number':\n                        result = new Number(result)\n                        break\n                    default:\n                        this.error('Syntax Error: unexpected type '+(typeof result))\n                        break\n                }\n            }\n            if (tagOb.tagName) {\n                JSONTag.setType(result, tagOb.tagName)\n            }\n            if (tagOb.attributes) {\n                JSONTag.setAttributes(result, tagOb.attributes)\n                if (tagOb.attributes?.id) {\n                    this.meta.index.id.set(tagOb.attributes.id, new WeakRef(result))\n                }\n            }\n        }\n        return result\n    }\n\n\twalk(holder, key, reviver)\n\t{\n\t\tvar k;\n\t\tvar v;\n\t\tvar value = holder[key];\n\t\tif (value !== null \n\t\t\t&& typeof value === \"object\" \n\t\t\t&& !(value instanceof String \n\t\t\t|| value instanceof Number\n\t\t\t|| value instanceof Boolean)\n\t\t) {\n\t\t\tfor (k in value) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\tv = this.walk(value, k, reviver);\n\t\t\t\t\tif (v !== undefined \n\t\t\t\t\t\t&& ( typeof value[k] === 'undefined' || value[k]!==v) )\n\t\t\t\t\t{\n                        let oldV = value[k]\n\t\t\t\t\t\tvalue[k] = v;\n\t\t\t\t\t\tif (JSONTag.getType(v)==='link') {\n                            this.removeUnresolved(oldV, value, k)\n\t\t\t\t\t\t\tthis.checkUnresolved(v, value, k)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (v === undefined) {\n\t\t\t\t\t\tdelete value[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        return reviver.call(holder, key, value, this.meta);\n\t}\n\n\treplaceLink(u,value)\n    {\n        if (typeof value !== 'undefined') {\n            let src = u.src.deref()\n            if (typeof src!== 'undefined' && JSONTag.getType(src[u.key])==='link') {\n                src[u.key] = value\n                return true\n            }\n        }\n    }\n\n    resolveLinks()\n    {\n\t\tif (this.meta.index.id.size>this.meta.unresolved.size) {\n\t        this.meta.unresolved.forEach((links,id) => {\n\t            let value = this.meta.index.id.get(id)?.deref()\n\t            if (value!==undefined) {\n\t                links.forEach((u,i) => {\n\t                    if (this.replaceLink(u,value)) {\n\t                        delete links[i]\n\t                    }\n\t                })\n\t            }\n\t        })\n\t    } else {\n\t        this.meta.index.id.forEach((ref,id) => {\n\t            let value = ref.deref()\n\t            let links = this.meta.unresolved.get(id)\n\t            if (value!==undefined && typeof links !== 'undefined') {\n\t                links.forEach((u) => {\n\t                    this.replaceLink(u,value)\n\t                })\n\t                this.meta.unresolved.delete(id)\n\t            }\n\t        })\n\t    }\n    }\n\n    parse(input, reviver)\n    {\n\t\tthis.at = 0\n\t    this.ch = \" \"\n\t    this.input = input\n\t    const result = this.value()\n\t    this.whitespace()\n\t    if (this.ch) {\n\t        this.error(\"Syntax error\")\n\t    }\n\t    if (typeof reviver == 'function') {\n\t    \tthis.walk({\"\":result}, \"\", reviver)\n\t    }\n\t    this.resolveLinks()\n\t    return result\n\t}\n}\n\nexport class SyntaxError extends Error\n{\n\tconstructor(message, parser)\n\t{\n\t\tsuper(message)\n\t\tthis.input = parser.input.substring(parser.at-100,parser.at+100)\n\t\tthis.at = parser.at\n\t}\n}\n"],"names":["$c2efebb60248672c$export$2e2bcd8739ae039","url","constructor","Error","$8e1f6d594b3b3e33$export$1bf7f05044e9c5cb","from","value","toString","toJSON","toJSONTag","result","String","attributes","$8e1f6d594b3b3e33$export$fe94072fee8a6976","$8e1f6d594b3b3e33$export$74da2cba014bdc09","Symbol","$8e1f6d594b3b3e33$var$jsonStringify","JSON","stringify","$8e1f6d594b3b3e33$var$createId","crypto","randomUUID","id","replacer","c","getRandomValues","Uint8Array","Math","random","replace","$8e1f6d594b3b3e33$export$9fec4d97f1922e0b","$8e1f6d594b3b3e33$export$630801d484da15df","v","$8e1f6d594b3b3e33$export$e2b5c5db9e2009fd","obj","type","Number","Array","isArray","Boolean","$8e1f6d594b3b3e33$export$b14ad400b1d09e0f","TypeError","includes","attr","join","indexOf","split","Object","keys","forEach","key","$8e1f6d594b3b3e33$export$735ee1799fd02602","assign","$8e1f6d594b3b3e33$export$e8bbf06ddab4542c","attributesString","entries","map","attrValue","filter","$5bb19b6c90f503ab$var$ExtendableProxy","Proxy","get","target","name","console","error","set","newValue","$5bb19b6c90f503ab$export$2e2bcd8739ae039","$2c833ebadcbaf103$var$escapee","b","f","n","r","t","$2c833ebadcbaf103$var$regexes","color","email","uuid","decimal","money","duration","phone","time","date","datetime","range","$2c833ebadcbaf103$export$2e2bcd8739ae039","at","ch","input","context","meta","baseURL","index","Map","unresolved","message","$2c833ebadcbaf103$export$f21cea08b0dd60e8","next","charAt","number","tagName","numString","valueOf","isInt","Infinity","isBigInt","BigInt","isFloat","typeError","float","test","parseFloat","str","int","parseInt","isColor","substring","length","isNaN","isType","isUrl","URL","e","checkStringType","string","hex","i","uffff","isFinite","fromCharCode","tag","val","tagOb","word","whitespace","boolOrNull","w","toLowerCase","checkUnresolved","item","object","link","links","l","src","deref","push","WeakRef","removeUnresolved","delete","array","walk","holder","reviver","k","prototype","hasOwnProperty","call","undefined","oldV","replaceLink","u","resolveLinks","size","ref","parse","parser","window","JSONTag","space","objectReferences","WeakMap","indent","gap","repeat","encodeProperties","mind","gapstart","gapend","prop","encodeEntries","arr","checkCircular","has","jsonValue","props","createIds","P","Parser","getType","setType","getTypeString","setAttribute","getAttribute","addAttribute","concat","removeAttribute","getAttributes","setAttributes","getAttributesString","isNull","clone","typeString","$8e1f6d594b3b3e33$var$shallowClone","o","Link","Null"],"version":3,"file":"browser.js.map"}